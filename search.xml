<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[笔记-Android群英传]]></title>
      <url>https://smallhamburger.github.io/blog/2017/01/26/%E7%AC%94%E8%AE%B0-Android%E7%BE%A4%E8%8B%B1%E4%BC%A0/</url>
      <content type="html"><![CDATA[<ol>
<li><p>大色块使用</p>
</li>
<li><p>Material Design<br> 主题</p>
</li>
<li><p>Palette<br> 提取颜色<br> 依赖：<code>com.android.support:palette-v7:21.0.2</code></p>
</li>
<li><p>elevation<br> 阴影</p>
<pre><code>xml--&gt;elevation
</code></pre></li>
<li><p>Tinting<br> 着色</p>
<pre><code>xml--&gt;tint/tintMode
</code></pre></li>
<li><p>Clipping<br> 裁剪</p>
<pre><code>java--&gt;
    ViewOutlineProvider vopCircle = new ViewOutlineProvider() {
        @Override
        public void getOutline(View view, Outline outline) {
            outline.setOval(0, 0, view.getWidth(), view.getHeight());
        }
    };
    cicle.setOutlineProvider(vopCircle);
注意：背景会覆盖裁剪
</code></pre></li>
<li><p>RecyclerView<br> 列表<br> 依赖：<code>com.android.support:recyclerview-v7:21.0.2</code><br> RecyclerView.Adapter</p>
</li>
<li><p>CardView<br> 卡片<br> 依赖：<code>com.android.support:cardview-v7:23.0.1</code></p>
<pre><code>xml--&gt;
    (1) xmlns:cardview=&quot;http://schemas.android.com/apk/res-auto&quot;
    (2) cardview:cardBackgroundColor=&quot;#aaf&quot;
       (3) cardview:cardCornerRadius=&quot;8dp&quot;
</code></pre></li>
<li><p>过渡动画<br> Explode/Slide/Fade<br> ActivityA:</p>
<pre><code>java--&gt;startActivity(intent, ActivityOptions.makeSceneTransitionAnimation(this).toBundle());
</code></pre><p> ActivityB:</p>
<pre><code>java--&gt;
getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);
getWindow().setEnterTransition(new Explode());
getWindow().setExitTransition(new Slide());
</code></pre></li>
<li><p>共享元素<br>ActivityA:</p>
<pre><code>java--&gt;
startActivity(intent, ActivityOptions.makeSceneTransitionAnimation(this, Pair.create(view,&quot;fab&quot;)).toBundle());
startActivity(intent, ActivityOptions.makeSceneTransitionAnimation(this, view,&quot;fab&quot;).toBundle());
</code></pre><p>XMLB–&gt;</p>
<pre><code>android:transitionName=&quot;fab&quot;
</code></pre></li>
<li><p>Ripple<br>波纹效果</p>
<pre><code>有界：android:backgroud=&quot;?android:attr/selectableItemBackgroud&quot;
无界：android:backgroud=&quot;?android:attr/selectableItemBackgroudBorderless&quot;
</code></pre><p>XML–&gt;</p>
<pre><code>&lt;ripple 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:color=&quot;#faa&quot;&gt;
    &lt;!--可省略--&gt;
    &lt;item&gt;
        &lt;shape android:shape=&quot;oval&quot;&gt;
            &lt;solid android:color=&quot;#aaf&quot;&gt;&lt;/solid&gt;
        &lt;/shape&gt;
    &lt;/item&gt;
&lt;/ripple&gt;
</code></pre></li>
<li><p>Circular Reveal<br>圆形展示</p>
<pre><code>final Animator animator;
imageView.setOnTouchListener(new View.OnTouchListener() {
    @Override
    public boolean onTouch(View v, MotionEvent event) {
        if(animator!=null &amp;&amp; animator.isRunning()){
            return false;
        }
        animator = ViewAnimationUtils.createCircularReveal(imageView, (int) event.getX(),(int) event.getY(), 0, (float) Math.hypot(imageView.getWidth(), imageView.getHeight()));
        animator.setInterpolator(new AccelerateDecelerateInterpolator());
        animator.setDuration(1000);
        animator.start();
        return false;
    }
});
</code></pre></li>
<li><p>StateListAnimator<br>java–&gt;</p>
<pre><code>imageView.setStateListAnimator(AnimatorInflater.loadStateListAnimator(this,R.drawable.state_selector));
</code></pre><p>state_selector.XML–&gt;</p>
<pre><code>&lt;ImageButton
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:src=&quot;@mipmap/ic_launcher&quot;
    android:stateListAnimator=&quot;@drawable/state_selector&quot;/&gt;
</code></pre><p>selector.XML–&gt;</p>
<pre><code>&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item android:state_pressed=&quot;true&quot;&gt;
        &lt;set&gt;
            &lt;objectAnimator android:propertyName=&quot;rotationY&quot;
                android:duration=&quot;1000&quot;
                android:valueTo=&quot;30&quot;
                android:pivotY=&quot;0&quot;
                android:valueType=&quot;floatType&quot;/&gt;
        &lt;/set&gt;
    &lt;/item&gt;
    &lt;item&gt;
        &lt;set&gt;
            &lt;objectAnimator android:propertyName=&quot;rotationY&quot;
                android:duration=&quot;1000&quot;
                android:valueTo=&quot;0&quot;
                android:pivotY=&quot;0&quot;
                android:valueType=&quot;floatType&quot;/&gt;
        &lt;/set&gt;
    &lt;/item&gt;
&lt;/selector&gt;
</code></pre></li>
<li><p>animated-selector</p>
<pre><code>5.X新特性
--&gt;P290
    无法复现
</code></pre></li>
<li><p>Toolbar</p>
<pre><code>代替ActionBar
compile &apos;com.android.support:appcompat-v7:21.0.3&apos;
--&gt;P294
    无法复现================================================
        java--&gt;
    toolbar= (Toolbar) findViewById(android.R.id.toolbar);
    toolbar.setLogo(R.mipmap.ic_launcher);
    toolbar.setTitle(&quot;主标题&quot;);
    toolbar.setSubtitle(&quot;副标题&quot;);
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    mDrawerLayout= (DrawerLayout) findViewById(R.id.drawer);
    mDrawerToggle = new ActionBarDrawerToggle(this,mDrawerLayout, toolbar, R.string.abc_action_bar_home_description,R.string.abc_action_bar_home_description_format);
    mDrawerToggle.syncState();
    mDrawerLayout.setDrawerListener(mDrawerToggle);
style.XML--&gt;
    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;
        &lt;item name=&quot;colorPrimary&quot;&gt;#4876FF&lt;/item&gt;
        &lt;item name=&quot;colorPrimaryDark&quot;&gt;#3A5FCD&lt;/item&gt;
        &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/white&lt;/item&gt;
        &lt;item name=&quot;android:searchViewStyle&quot;&gt;@style/MySearchView&lt;/item&gt;
        &lt;/style&gt;
        &lt;style name=&quot;MySearchView&quot; parent=&quot;Widget.AppCompat.SearchView&quot;&gt;&lt;/style&gt;
</code></pre></li>
<li><p>DrawerLayout</p>
<pre><code>侧滑菜单--&gt;
&lt;android.support.v4.widget.DrawerLayout
    android:id=&quot;@+id/drawer&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    &gt;
    &lt;LinearLayout
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:background=&quot;@android:color/holo_blue_light&quot;
        android:orientation=&quot;vertical&quot;&gt;
        &lt;Button
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:text=&quot;内容界面&quot;/&gt;
    &lt;/LinearLayout&gt;
    &lt;ScrollView
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:layout_gravity=&quot;start&quot;
        &gt;
        &lt;LinearLayout
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;match_parent&quot;
            android:layout_gravity=&quot;start&quot;
            android:background=&quot;@android:color/holo_blue_light&quot;
            android:orientation=&quot;vertical&quot;&gt;
            &lt;Button
                android:layout_width=&quot;200dp&quot;
                android:layout_height=&quot;wrap_content&quot;
                android:text=&quot;菜单界面_1&quot;/&gt;
        &lt;/LinearLayout&gt;
    &lt;/ScrollView&gt;
    &lt;ScrollView
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:layout_gravity=&quot;end&quot;
        &gt;
        &lt;LinearLayout
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;match_parent&quot;
            android:layout_gravity=&quot;end&quot;
            android:background=&quot;@android:color/holo_blue_light&quot;
            android:orientation=&quot;vertical&quot;&gt;
            &lt;Button
                android:layout_width=&quot;200dp&quot;
                android:layout_height=&quot;wrap_content&quot;
                android:text=&quot;菜单界面_2&quot;/&gt;
        &lt;/LinearLayout&gt;
    &lt;/ScrollView&gt;
&lt;/android.support.v4.widget.DrawerLayout&gt;
</code></pre></li>
<li><p>Notification<br>通知<br>折叠式</p>
<pre><code>notification.contentIntent = RemoteViews;
</code></pre><p>展开式</p>
<pre><code>notification.bigContentView = RemoteViews;
</code></pre><p>悬挂式</p>
<pre><code>builder.setFullScreenIntent(pendingIntent, true);
</code></pre><p>等级式</p>
<pre><code>builder.setVisibility(Notification.VISIBILITY_PUBLIC);
</code></pre></li>
<li><p>Layer</p>
<pre><code>图层
    XML--&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        &lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
            &lt;item android:drawable=&quot;@drawable/ic_launcher&quot;&gt;&lt;/item&gt;
            &lt;item android:drawable=&quot;@drawable/ic_launcher&quot;
                android:left=&quot;20dip&quot;
                android:right=&quot;20dip&quot;
                android:bottom=&quot;20dip&quot;
                android:top=&quot;20dip&quot;&gt;&lt;/item&gt;
        &lt;/layer-list&gt;
    Java--&gt;
Paint p =new Paint();
p.setColor(Color.RED);
canvas.drawCircle(getWidth()/3,getHeight()/3,getWidth()/2,p);

canvas.saveLayerAlpha(0, 0 , getWidth() ,getHeight(),127);    &lt;----
p.setColor(Color.GREEN);
canvas.drawCircle(getWidth()*2/3,getHeight()*2/3,getWidth()/2,p);
canvas.restore();
</code></pre></li>
<li><p>Bitmap</p>
<pre><code>XML--&gt;
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
    &lt;bitmap xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
        android:src=&quot;@drawable/ic_launcher&quot;&gt;
    &lt;/bitmap&gt;
</code></pre></li>
<li><p>ViewStub<br>可以在XML中插入<viewstub>标签，在初次渲染时不会填充这个控件<br>只能调用一次inflate()方法，因为调用一次后，viewStub就变为了指定的控件</viewstub></p>
</li>
</ol>
<p>XML<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ViewStub</div><div class="line">	android:id=&quot;@+id/view_stub&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layout=&quot;@layout/activity_main&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ViewStub viewStub = (ViewStub) findViewById(R.id.view_stub);</div><div class="line">//viewStub.setVisibility(View.VISIBLE);</div><div class="line">LinearLayout ll = (LinearLayout) viewStub.inflate();</div></pre></td></tr></table></figure></p>
<hr>
<p>##色彩特效</p>
<p>###色彩矩阵分析</p>
<ul>
<li>色调–物体传播的颜色</li>
<li>饱和度–颜色的纯度，从0（灰）到100%（饱和）来进行描述</li>
<li>亮度–颜色的相对明暗程度</li>
</ul>
<p>###颜色矩阵<br>ColorMatrix 4X5数字矩阵</p>
<ol>
<li>处理色调                                                 <pre><code>cm.setRotate()
</code></pre></li>
<li>处理饱和度<pre><code>cm.setSaturation()
</code></pre></li>
<li>处理亮度<pre><code>cm.setScale();
</code></pre>####例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Paint p =new Paint();</div><div class="line">Bitmap bm = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);</div><div class="line">Bitmap bmp = Bitmap.createBitmap(bm);</div><div class="line">ColorMatrix cm = new ColorMatrix();</div><div class="line">//指定颜色矩阵数值4X5，灰度效果</div><div class="line">float[] matrix = &#123;</div><div class="line">        0.33f,0.59f,0.11f,0,0,</div><div class="line">        0.33f,0.59f,0.11f,0,0,</div><div class="line">        0.33f,0.59f,0.11f,0,0,</div><div class="line">        0,    0,    0,    1,0</div><div class="line">&#125;;</div><div class="line">cm.set(matrix);</div><div class="line">ColorMatrix cm2 = new ColorMatrix();</div><div class="line">cm2.setScale(1f,1f,0f,1);</div><div class="line">cm.postConcat(cm2);</div><div class="line">p.setColorFilter(new ColorMatrixColorFilter(cm));</div><div class="line">canvas.drawBitmap(bmp,0,0,p);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>##图形特效</p>
<p>###变形矩阵<br>Matrix 3X3数字矩阵</p>
<p>前乘和后乘是不同的运算，影响变换的顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m.postXXX();</div><div class="line">m.preXXX();</div></pre></td></tr></table></figure></p>
<p>####图形变换</p>
<ol>
<li>平移变换<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m.setTranslate();</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">| 1 0 Δx |</div><div class="line">| 0 1 Δy |</div><div class="line">| 0 0  1 |</div></pre></td></tr></table></figure>
<ol>
<li>旋转变换<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m.setRotate();</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">| cosα -sinα  0 |</div><div class="line">| sinα  cosα  0 |</div><div class="line">|    0     0  1 |</div></pre></td></tr></table></figure>
<ol>
<li>缩放变换<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m.setScale();</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">| k1  0  0 |</div><div class="line">|  0 k2  0 |</div><div class="line">|  0  0  1 |</div></pre></td></tr></table></figure>
<ol>
<li>错切变换<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m.setSkew();</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|  1 k1  0 |</div><div class="line">| k2  1  0 |</div><div class="line">|  0  0  1 |</div></pre></td></tr></table></figure>
<p>####像素块分析<br>    /**</p>
<pre><code> * WIDTH 像素块的横向个数 
 * HEIGHT 像素块的纵向个数 
 * verts 分割线的交叉点坐标数组，包括与边界的交叉点，长度为 （WIDTH + 1）*（HEIGHT + 1）*2
 * /
canvas.drawBitmapMesh(bitmap,WIDTH,HEIGHT,verts,0,null,0,null);
</code></pre><p>####例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public MyTextView(Context context, AttributeSet attrs) &#123;</div><div class="line">    super(context, attrs);</div><div class="line">    init();</div><div class="line">&#125;</div><div class="line">private final int WIDTH = 200;</div><div class="line">private final int HEIGHT = 200;</div><div class="line">private Bitmap bm = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);</div><div class="line">private float mWidth;</div><div class="line">private float mHeight;</div><div class="line">private float[] orig = new float[(WIDTH+1)*(HEIGHT+1)*2];</div><div class="line">private float[] verts = new float[(WIDTH+1)*(HEIGHT+1)*2];</div><div class="line">private void init()&#123;</div><div class="line">    mWidth=bm.getWidth();</div><div class="line">    mHeight=bm.getHeight();</div><div class="line">    float dx = mWidth/WIDTH;</div><div class="line">    float dy = mHeight/HEIGHT;</div><div class="line">    for (int y=0;y&lt;=HEIGHT;y++)&#123;</div><div class="line">        for (int x=0;x&lt;=WIDTH;x++)&#123;</div><div class="line">            int index = (WIDTH+1)*y+x;</div><div class="line">            orig[index*2]=verts[index*2]=dx*x;</div><div class="line">            orig[index*2+1]=verts[index*2+1]=dy*y+100;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    wave();</div><div class="line">    canvas.drawBitmapMesh(bm,WIDTH,HEIGHT,verts,0,null,0,null);</div><div class="line">    super.onDraw(canvas);</div><div class="line">    invalidate();</div><div class="line">&#125;</div><div class="line">private double k;</div><div class="line">private final int A = 10;</div><div class="line">private void wave()&#123;</div><div class="line">    for (int y=0;y&lt;=HEIGHT;y++)&#123;</div><div class="line">        for (int x=0;x&lt;=WIDTH;x++)&#123;</div><div class="line">            int index = (WIDTH+1)*y+x;</div><div class="line">            verts[index*2] = orig[index*2]+getMeasuredWidth()/2-bm.getWidth()/2;</div><div class="line">            float dy = (float) Math.sin(2*Math.PI/WIDTH*x + Math.PI*k);</div><div class="line">            verts[index*2+1]=orig[index*2+1]+dy*A;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    k+=0.1f;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##画笔特效（极其重要）</p>
<p>###PorterDuffXfermode<br>遮盖效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));</div></pre></td></tr></table></figure></p>
<p>更好的效果可以使用贝塞尔曲线，当前只使用圆滑效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">mPaint.setStrokeJoin(Paint.Join.ROUND);</div><div class="line">mPaint.setStrokeWidth(100);</div><div class="line">mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));</div></pre></td></tr></table></figure></p>
<p><strong><em>注意</em></strong>：</p>
<ul>
<li>最好关闭在绘图时关闭硬件加速，有些模式不支持硬件加速</li>
</ul>
<p>####例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void init()&#123;</div><div class="line">	//低层的就是dst，上层的就是src</div><div class="line">    src = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);</div><div class="line">    dst =Bitmap.createBitmap(src.getWidth(),src.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">    mCanvas = new Canvas(dst);</div><div class="line">    mPaint = new Paint();</div><div class="line">    mPaint.setColor(Color.RED);</div><div class="line">    mCanvas.drawCircle(src.getWidth()/2,src.getHeight()/2,src.getHeight()/3,mPaint);</div><div class="line">    mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</div><div class="line">    mCanvas.drawBitmap(src,0,0,mPaint);</div><div class="line">    mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));</div><div class="line">    mCanvas.drawCircle(src.getWidth()/2,src.getHeight()/2,src.getHeight()/10,mPaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    canvas.drawBitmap(dst,0,0,null);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###Shader<br>着色器，渲染器<br>实现一系列的渐变和渲染效果</p>
<p><strong>Shader</strong></p>
<ol>
<li>BitmapShader–位图Shader</li>
<li>LinearGradient–线性Shader</li>
<li>RadialGradient–光束Shader</li>
<li>SweepGradient–梯度Shader</li>
<li>ComposeShader–混合Shader</li>
</ol>
<p>####例–LinearGradient：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    mPaint.setShader(new LinearGradient(0,0,getMeasuredWidth(),0,Color.RED,Color.GREEN, Shader.TileMode.MIRROR));</div><div class="line">    canvas.drawRect(0,0,getMeasuredWidth(),getMeasuredHeight(),mPaint);</div><div class="line">    super.onDraw(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####例–PorterXfermode和Shader混合使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void init()&#123;</div><div class="line">    src = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);</div><div class="line">    Matrix matrix = new Matrix();</div><div class="line">    matrix.setScale(1f,-1f);</div><div class="line">    dust = Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);</div><div class="line">    mPaint = new Paint();</div><div class="line">    mPaint.setShader(new LinearGradient(0,src.getHeight(),0,src.getHeight()*2,0xFF000000,0xffffffff, Shader.TileMode.CLAMP));</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    int saveCount = canvas.saveLayer(0,0,getMeasuredWidth(),getMeasuredHeight(),null,Canvas.ALL_SAVE_FLAG &amp; (~Canvas.CLIP_SAVE_FLAG));</div><div class="line">    canvas.drawBitmap(src,0,0,null);</div><div class="line">    canvas.drawBitmap(dust,0,src.getHeight(),null);</div><div class="line">    mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</div><div class="line">    canvas.drawRect(0,src.getHeight(),src.getHeight(),src.getHeight()*2,mPaint);</div><div class="line">    mPaint.setXfermode(null);</div><div class="line">    canvas.restoreToCount(saveCount);</div></pre></td></tr></table></figure></p>
<p>###PathEffect<br>路径效果</p>
<ol>
<li><p>null<br>无效果</p>
</li>
<li><p>CornerPathEffect<br>将拐角变得圆滑</p>
</li>
<li><p>DisctetePathEffect<br>线段上有很多的杂点</p>
</li>
<li><p>DashPathEffect<br>绘制虚线，可以控制每个点的间隔</p>
</li>
<li><p>PathDashPathEffect<br>DashPathEffect增强版，可以设置点的样式，矩形，圆点等</p>
</li>
<li><p>ComposePathEffect<br>组合方式</p>
</li>
</ol>
<p>####例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class MyPathView extends View&#123;</div><div class="line">    private Path mPath;</div><div class="line">    private PathEffect[] mPathEffects = new PathEffect[6];</div><div class="line">    private Paint mPaint;</div><div class="line">    public MyPathView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPath = new Path();</div><div class="line">        mPath.moveTo(0,200);</div><div class="line">        for(int i=1;i&lt;50;i++)&#123;</div><div class="line">            mPath.lineTo(i*20, (float) (Math.random()*100)+200);</div><div class="line">        &#125;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.parseColor(&quot;#000000&quot;));</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(5);</div><div class="line">        mPathEffects[0] = null;</div><div class="line">        mPathEffects[1] = new CornerPathEffect(30);</div><div class="line">        mPathEffects[2] = new DiscretePathEffect(3f,5f);</div><div class="line">        mPathEffects[3] = new DashPathEffect(new float[]&#123;50f,10f,5f&#125;,0);</div><div class="line">        Path path = new Path();</div><div class="line">        path.addRect(0,0,8,8,Path.Direction.CCW);</div><div class="line">        mPathEffects[4] = new PathDashPathEffect(path,12,0,PathDashPathEffect.Style.ROTATE);</div><div class="line">        mPathEffects[5] = new ComposePathEffect( mPathEffects[3], mPathEffects[1]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.save();</div><div class="line">        for (int i = 0 ;i&lt; mPathEffects.length;i++)&#123;</div><div class="line">            mPaint.setPathEffect(mPathEffects[i]);</div><div class="line">            canvas.drawPath(mPath,mPaint);</div><div class="line">            canvas.translate(0, 200);</div><div class="line">        &#125;</div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>效果图如下</em></strong><br><img src="https://raw.githubusercontent.com/SmallHamburger/blog/master/images/PathEffect.png" alt="PathEffect"></p>
<p>##动画</p>
<p>###布局动画<br>LinearLayout</p>
<p>####例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LinearLayout ll = (LinearLayout) findViewById(R.id.ll);</div><div class="line">ScaleAnimation sa = new ScaleAnimation(0, 1, 0, 1);</div><div class="line">sa.setDuration(2000);</div><div class="line">LayoutAnimationController lac = new LayoutAnimationController(sa, 0.5f);</div><div class="line">lac.setOrder(LayoutAnimationController.ORDER_RANDOM);</div><div class="line">ll.setLayoutAnimation(lac);</div></pre></td></tr></table></figure></p>
<p>##SVG</p>
]]></content>
    </entry>
    
  
  
</search>
